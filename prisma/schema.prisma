generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(GUEST)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  properties    Property[]
  bookings      Booking[]
  reviews       Review[]
  messages      Message[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Property {
  id            String    @id @default(cuid())
  title         String
  description   String    @db.Text
  price         Decimal   @db.Decimal(10, 2)
  currency      String    @default("KES")
  location      String
  county        String
  city          String
  images        PropertyImage[]
  bedrooms      Int       @db.SmallInt
  bathrooms     Int       @db.SmallInt
  maxGuests     Int       @db.SmallInt
  latitude      Float?
  longitude     Float?
  amenities     String[]
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  hostId        String
  host          User      @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  reviews       Review[]

  @@map("properties")
}
model PropertyImage {
  id         String   @id @default(cuid())
  url        String   // URL to the stored image
  filename   String
  isCover    Boolean  @default(false)
  order      Int      @default(0)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  
  @@map("property_images")
}

model Booking {
  id            String           @id @default(cuid())
  checkIn       DateTime
  checkOut      DateTime
  guests        Int           @db.SmallInt
  totalPrice    Decimal       @db.Decimal(10, 2)
  currency      String        @default("KES")
  status        BookingStatus @default(PENDING)
  payment       Payment?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  propertyId    String
  property      Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId        String
  guest         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]

  // Prevent double booking
  @@unique([propertyId, checkIn, checkOut])
  @@map("bookings")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      @db.SmallInt // 1-5 rating
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  reviewerId  String
  reviewer    User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([propertyId, reviewerId])
  @@map("reviews")
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Payment {
  id         Int      @id @default(autoincrement())
  amount     Float
  method     String   // e.g., 'Mpesa', 'Card', 'Cash'
  status     String   // e.g., 'Paid', 'Pending', 'Failed'
  timestamp  DateTime @default(now())
  bookingId  String      @unique
  booking    Booking  @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
}


enum Role {
  GUEST
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}
