generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  phone         String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role       @default(GUEST)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  bookings      Booking[]
  messages      Message[]
  properties    Property[]
  reviews       Review[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Property {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Decimal   @db.Decimal(10, 2)
  currency    String    @default("KES")
  location    String
  county      String
  images      Image[]
  bedrooms    Int       @db.SmallInt
  bathrooms   Int       @db.SmallInt
  city        String
  maxGuests   Int       @db.SmallInt
  latitude    Float?
  longitude   Float?
  amenities   String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hostId      String
  bookings    Booking[]
  host        User      @relation(fields: [hostId], references: [id], onDelete: Cascade)
  reviews     Review[]

  @@map("properties")
}

model Image {
  id         String   @id @default(cuid())
  filename   String
  url        String
  isCover    Boolean  @default(false)
  order      Int
  propertyId String   // Foreign key
  property   Property @relation(fields: [propertyId], references: [id])
  // other fields...
}

model Booking {
  id         String        @id @default(cuid())
  checkIn    DateTime
  checkOut   DateTime
  guests     Int           @db.SmallInt
  totalPrice Decimal       @db.Decimal(10, 2)
  currency   String        @default("KES")
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  propertyId String
  userId     String
  payment    Payment?
  property   Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  guest      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   Message[]

  @@unique([propertyId, checkIn, checkOut])
  @@map("bookings")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      @db.SmallInt
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  propertyId String
  reviewerId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  reviewer   User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([propertyId, reviewerId])
  @@map("reviews")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  senderId  String
  bookingId String
  isRead    Boolean  @default(false)
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  method    String
  status    String
  timestamp DateTime @default(now())
  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
}

enum Role {
  GUEST
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}
